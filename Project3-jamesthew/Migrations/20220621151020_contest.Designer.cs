// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project3_jamesthew.Data;

#nullable disable

namespace Project3_jamesthew.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220621151020_contest")]
    partial class contest
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Project3_jamesthew.Entitites.CategoryEntity", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CategoryIcon")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<string>("CategoryImg")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("CategoryId");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("Project3_jamesthew.Entitites.ContestEntity", b =>
                {
                    b.Property<int>("ContestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContestId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("ContestDescription")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("ContestEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ContestStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContestTitle")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.HasKey("ContestId");

                    b.HasIndex("CategoryId");

                    b.ToTable("contests");
                });

            modelBuilder.Entity("Project3_jamesthew.Entitites.FeedbackEntity", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"), 1L, 1);

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FeedbackEmail")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FeedbackName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FeedbackReview")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("FeedbackId");

                    b.ToTable("feedbacks");
                });

            modelBuilder.Entity("Project3_jamesthew.Entitites.RecipesEntity", b =>
                {
                    b.Property<int>("RecipesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipesId"), 1L, 1);

                    b.Property<int>("Calories")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("Carbs")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("CategoriesId")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("CookingTime")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Fat")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("Fiber")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("PrepationTime")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("Proteins")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<string>("RecipesDescription")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("RecipesPic")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("RecipesTitle")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Salt")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("SaturatedFat")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("Serve")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.Property<int>("Sugar")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.HasKey("RecipesId");

                    b.HasIndex("CategoriesId");

                    b.ToTable("recipes");
                });

            modelBuilder.Entity("Project3_jamesthew.Entitites.TipsEntity", b =>
                {
                    b.Property<int>("TipsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipsId"), 1L, 1);

                    b.Property<string>("TipsDescription")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("TipsImage")
                        .IsRequired()
                        .HasColumnType("varchar(1500)");

                    b.Property<string>("TipsTitle")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("TipsId");

                    b.ToTable("tipsEntities");
                });

            modelBuilder.Entity("Project3_jamesthew.Entitites.UserIngredientEntity", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"), 1L, 1);

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Quantity")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("RecipesId")
                        .HasMaxLength(20)
                        .HasColumnType("int");

                    b.HasKey("IngredientId");

                    b.HasIndex("RecipesId");

                    b.ToTable("usersIngredients");
                });

            modelBuilder.Entity("Project3_jamesthew.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project3_jamesthew.Entitites.ContestEntity", b =>
                {
                    b.HasOne("Project3_jamesthew.Entitites.CategoryEntity", "Category")
                        .WithMany("contests")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Project3_jamesthew.Entitites.RecipesEntity", b =>
                {
                    b.HasOne("Project3_jamesthew.Entitites.CategoryEntity", "Category")
                        .WithMany("recipes")
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Project3_jamesthew.Entitites.UserIngredientEntity", b =>
                {
                    b.HasOne("Project3_jamesthew.Entitites.RecipesEntity", "Recipes")
                        .WithMany("UserIngredients")
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipes");
                });

            modelBuilder.Entity("Project3_jamesthew.Entitites.CategoryEntity", b =>
                {
                    b.Navigation("contests");

                    b.Navigation("recipes");
                });

            modelBuilder.Entity("Project3_jamesthew.Entitites.RecipesEntity", b =>
                {
                    b.Navigation("UserIngredients");
                });
#pragma warning restore 612, 618
        }
    }
}
